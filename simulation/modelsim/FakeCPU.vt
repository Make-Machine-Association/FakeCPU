// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/23/2020 22:15:47"
                                                                                
// Verilog Test Bench template for design : FakeCPU
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module FakeCPU_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk_50;
reg [3:0] key;
reg ps2_clk;
reg ps2_dat;
reg [9:0] sw;
// wires                                               
wire clk_instr;
wire finish;
wire [6:0]  hex0;
wire [6:0]  hex1;
wire [6:0]  hex2;
wire [6:0]  hex3;
wire [6:0]  hex4;
wire [6:0]  hex5;
wire [9:0]  ledr;
wire [4:0]  test_decoding;
wire [7:0]  test_gfx_cmd_state;
wire [31:0]  test_instr;
wire [17:0]  test_instr_addr;
wire test_ok;
wire test_run;
wire [2:0]  test_solving;
wire [7:0]  vga_b;
wire vga_blank_n;
wire vga_clk;
wire [7:0]  vga_g;
wire vga_hs;
wire [7:0]  vga_r;
wire vga_sync_n;
wire vga_vs;

// assign statements (if any)                          
FakeCPU i1 (
// port map - connection between master ports and signals/registers   
	.clk_50(clk_50),
	.clk_instr(clk_instr),
	.finish(finish),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.key(key),
	.ledr(ledr),
	.ps2_clk(ps2_clk),
	.ps2_dat(ps2_dat),
	.sw(sw),
	.test_decoding(test_decoding),
	.test_gfx_cmd_state(test_gfx_cmd_state),
	.test_instr(test_instr),
	.test_instr_addr(test_instr_addr),
	.test_ok(test_ok),
	.test_run(test_run),
	.test_solving(test_solving),
	.vga_b(vga_b),
	.vga_blank_n(vga_blank_n),
	.vga_clk(vga_clk),
	.vga_g(vga_g),
	.vga_hs(vga_hs),
	.vga_r(vga_r),
	.vga_sync_n(vga_sync_n),
	.vga_vs(vga_vs)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	clk_50 = 1'b0;
	forever #5 clk_50 = ~clk_50;
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

