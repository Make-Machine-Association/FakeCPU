// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/18/2020 20:11:42"
                                                                                
// Verilog Test Bench template for design : FakeCPU
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module FakeCPU_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg go;
reg [31:0] init_pc;
reg init_wren;
reg [31:0]test_mmemory_addr;
reg test_intr;
// wires                                               
wire clk_instr;
wire [31:0]  data_pc;
wire finish;
wire [4:0]  test_decoding;
wire [31:0]  test_instr;
wire test_run;
wire test_ok;
wire [31:0]test_mmemory_data;
wire [31:0]test_reg_rdata;
wire [31:0]test_reg_wdata;
wire [4:0]test_reg_raddr;
wire [4:0]test_reg_waddr;
wire test_reg_wren;

// assign statements (if any)                          
FakeCPU i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_instr(clk_instr),
	.data_pc(data_pc),
	.finish(finish),
	.go(go),
	.init_pc(init_pc),
	.init_wren(init_wren),
	.test_decoding(test_decoding),
	.test_instr(test_instr),
	.test_run(test_run),
	.test_ok(test_ok),
	.test_mmemory_addr(test_mmemory_addr),
	.test_intr(test_intr),
	.test_mmemory_data(test_mmemory_data),
	.test_reg_rdata(test_reg_rdata),
	.test_reg_wdata(test_reg_wdata),
	.test_reg_raddr(test_reg_raddr),
	.test_reg_waddr(test_reg_waddr),
	.test_reg_wren(test_reg_wren)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin
	clk = 1'b0; go = 1'b0; init_pc = 32'd0; init_wren = 1'b1;
	test_intr = 1'b0;  test_mmemory_addr = 32'h0;
	#10;
	init_wren = 1'b0; 
	#10;
	go = 1'b1;
	#100000;
	test_mmemory_addr = 32'd40; test_intr = 1'b1;
	#10;
	test_mmemory_addr = 32'd41; #10;
	test_mmemory_addr = 32'd42; #10;
	test_mmemory_addr = 32'd43; #10;
	$stop;
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
	#5 clk = ~clk;
// --> end                                             
end                                                    
endmodule

